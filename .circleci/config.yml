version: 2.1
orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            #exit 1
            echo error
            #aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            #aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build                      
            #exit 1
       
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build                           
            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test                      
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test                      
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
                          

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force 
            npm audit --audit-level=critical
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force 
            npm audit --audit-level=critical
            #exit 1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: install tar & Gzip
          command: |
            yum -y install tar gzip          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      


workflows:
  default:
    jobs:
      - build-frontend:
          context: guytony
      - build-backend:
          context: guytony
      - test-frontend:
          context: guytony
          requires: [build-frontend]
      - test-backend:
          context: guytony
          requires: [build-backend]
      - scan-backend:
          context: guytony
          requires: [build-backend]
      - scan-frontend:
          context: guytony
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
