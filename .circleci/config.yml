version: 2.1
orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here 
      id: 
        type: string
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            #exit 1
            #echo error
            if aws s3 ls | grep udapeople-<<parameters.id>>; then
              aws s3 rm s3://udapeople-<<parameters.id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    
      # Add parameter here
    parameters:
      id:
        type: string           
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/GWWgRbTdJyn47ixgVQC3C3/migration_<< parameters.id >>)
            #SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            #  exit 1
            fi
      

jobs:
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build                      
            #exit 1
       
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build                           
            #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test                      
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
              
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test                      
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
                          

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force 
            npm audit --audit-level=critical
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force 
            npm audit --audit-level=critical
            #exit 1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C03PKJB8Q0Y
          event: pass
          template: success_tagged_deploy_1            

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: install tar & Gzip
          command: |
            yum -y install tar gzip          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            # Your code here
            #exit 1
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo ${OldWorkflowID} > ~/project/.circleci/ansible/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
       #Here's where you will add some code to rollback on failure 
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
#      - destroy-environment:
#          id: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      #- image: python:3.7-alpine3.11 
      - image: python:3.9.1-alpine3.12    
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["c0:23:e5:0e:b5:a6:9b:c3:8d:51:24:40:54:d0:85:b2"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add tar gzip 
            apk add --update ansible aws-cli
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      #- image: circleci/node:13.8.0
      - image: python:3.9-bullseye
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            #apt-get install -y python3
            apt-get install -y nodejs 
            apt-get install -y npm
            apt-get install -y awscli
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            #exit 1
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/GWWgRbTdJyn47ixgVQC3C3/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - run:  curl --insecure https://kvdb.io/GWWgRbTdJyn47ixgVQC3C3/migration_${CIRCLE_WORKFLOW_ID:0:7}

            #exit 1
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.9.1-alpine3.12
      #- image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk add tar gzip 
            apk add npm nodejs
            apk add --update ansible aws-cli
      - run:
          name: Get backend url
          command: |
            # your code here
            
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"           
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env                         
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
         id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.9.1-alpine3.12
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["c0:23:e5:0e:b5:a6:9b:c3:8d:51:24:40:54:d0:85:b2"] 
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk add tar gzip 
            apk add npm nodejs
            apk add --update ansible aws-cli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.1-alpine3.12
      #- image: python:3.9-bullseye
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl nodejs npm 
            apk add --update ansible aws-cli
      - run:
          name: Backend smoke test.
          command: |
            # your code here           
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)         
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"           
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                return 0
            else
                return 1
            fi
      - destroy-environment:
         id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
         id: ${CIRCLE_WORKFLOW_ID:0:7}


  cloudfront-update:
    docker:
      # - image: python:3.9.1-alpine3.12
      - image: python:3.9-bullseye
    steps:
      - checkout
      - run:
          name: install dependencies
          command:
            #yum  update
            apt-get update
            #apt-get install -y python3
            apt-get install -y nodejs 
            apt-get install -y npm
            apt-get install -y awscli
      - run:
          name: Copy Old Workflow
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID $(cat ~/project/.circleci/ansible/OldWorkflowID.txt)
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-"${OldWorkflowID:10:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-"${OldWorkflowID:10:7}"
              aws cloudformation delete-stack --stack-name udapeople-backend-"${OldWorkflowID:10:7}"
              
            fi


workflows:
  default:
    jobs:
      - build-frontend:
          context: guytony
          filters:
            branches:
              only: [master, dev-branch]
      - build-backend:
          context: guytony
          filters:
            branches:
              only: [master, dev-branch]
      - test-frontend:
          context: guytony
          requires: [build-frontend]
          filters:
            branches:
              only: [master, dev-branch]
      - test-backend:
          context: guytony
          requires: [build-backend]
          filters:
            branches:
              only: [master, dev-branch]
      - scan-backend:
          context: guytony
          requires: [build-backend]
          filters:
            branches:
              only: [master, dev-branch]
      - scan-frontend:
          context: guytony
          requires: [build-frontend]
          filters:
            branches:
              only: [master, dev-branch]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
           branches:
              only: [master]

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-backend:
          requires: [run-migrations]
      - deploy-frontend:
          requires: [run-migrations, deploy-backend]
      - smoke-test:
          requires: [deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]